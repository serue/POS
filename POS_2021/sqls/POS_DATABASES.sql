BEGIN TRY
	BEGIN TRANSACTION
			USE POS_DATABASE;

			DROP TABLE IF EXISTS CATEGORY;
			CREATE TABLE CATEGORY(
				ID INT IDENTITY(1,1) NOT NULL,
				CATEGORY VARCHAR(50) NOT NULL UNIQUE,
				NOTES VARCHAR(1000) NULL,
				SUB_CATEGORY1 VARCHAR(200) NULL,
				SUB_CATEGORY2 VARCHAR(200) NULL,
				SUB_CATEGORY3 VARCHAR(200) NULL
				PRIMARY KEY(ID)
			);

			DROP TABLE IF EXISTS INVENTORY;
			CREATE TABLE INVENTORY(
				ID INT IDENTITY(1,1) NOT NULL,
				DATE DATE NOT NULL,
				CATEGORY VARCHAR(50) NULL REFERENCES CATEGORY(CATEGORY),
				SUB_CATEGORY1 VARCHAR(200) NULL,
				SUB_CATEGORY2 VARCHAR(200) NULL,
				SUB_CATEGORY3 VARCHAR(200) NULL,
				BARCODE VARCHAR(50) NOT NULL UNIQUE,
				NAME VARCHAR(500) NOT NULL UNIQUE,
				QUANTITY DECIMAL(18,2) NOT NULL,
				RE_ORDER DECIMAL(18,2) NULL,
				SALE_QTY DECIMAL(18,2) NULL,
				COST DECIMAL(18,2) NOT NULL,
				PRICE DECIMAL(18,2) NOT NULL,
				W_PRICE DECIMAL(18,2) NULL,
				W_QTY DECIMAL(18,2) NULL,
				MARGIN DECIMAL(18,2) NOT NULL,
				VENDOR_CODE VARCHAR(100) NULL,
				SKU VARCHAR(70) NULL,
				PRODUCT_STATUS INT NOT NULL,
				EXTRA1 VARCHAR(1000) NULL,
				EXTRA2 VARCHAR(1000) NULL,
				EXTRA3 VARCHAR(1000) NULL
				PRIMARY KEY(ID)
			);

			DROP TABLE IF EXISTS USERS;
			CREATE TABLE USERS(
				ID INT IDENTITY(1,1) NOT NULL,
				NAME VARCHAR(255) NOT NULL,
				ID_NO VARCHAR(15) NOT NULL UNIQUE,
				ADDRESS VARCHAR(1000) NOT NULL,
				GENDER VARCHAR(50) NOT NULL,
				AGE INT NOT NULL,
				CONTACT VARCHAR(100) NOT NULL,
				EMP_ID VARCHAR(255) NOT NULL UNIQUE,
				PRIMARY KEY(ID)
				);
			DROP TABLE IF EXISTS ACCOUNTS;
			CREATE TABLE ACCOUNTS(
				ID INT IDENTITY PRIMARY KEY NOT NULL,
				EMP_ID VARCHAR(255) NOT NULL UNIQUE REFERENCES USERS(EMP_ID),
				USERNAME VARCHAR(255) NOT NULL UNIQUE,
				PASSWORD VARCHAR(2000) NOT NULL,
				STATUS INT NOT NULL
			);
			DROP TABLE IF EXISTS M_PAYMENTS;
			CREATE TABLE M_PAYMENTS(
				ID INT IDENTITY(1,1) NOT NULL,
				METHOD VARCHAR(100) NOT NULL UNIQUE,
				NOTES VARCHAR(500) NULL,
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS TILLS;
			CREATE TABLE TILLS(
				ID INT IDENTITY(1,1) NOT NULL,
				TILL_NAME VARCHAR(100) NOT NULL UNIQUE,
				TILL_NUMBER VARCHAR(100) NOT NULL UNIQUE,
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS TRANSACTIONS;
			CREATE TABLE TRANSACTIONS(
				ID INT IDENTITY(1,1) NOT NULL,
				TRANSACTION_ID VARCHAR(100) NOT NULL UNIQUE,
				TRANS_DATE DATETIME NOT NULL,
				AMOUNT DECIMAL(18,2) NOT NULL,
				PAID DECIMAL(18,2) NOT NULL,
				TOTAL DECIMAL(18,2) NOT NULL,
				CHANGE DECIMAL(18,2) NOT NULL,
				TAX DECIMAL(18,2) NOT NULL,
				PAYMENT VARCHAR(100) NOT NULL REFERENCES M_PAYMENTS(METHOD),
				CASHIER VARCHAR(255) NOT NULL REFERENCES ACCOUNTS(USERNAME),
				TILL VARCHAR(100) NOT NULL REFERENCES TILLS(TILL_NUMBER),
				TOTAL_ITEMS INT NOT NULL,
				STATUS VARCHAR(255) NOT NULL
				PRIMARY KEY(ID)
				);


			DROP TABLE IF EXISTS TRANS_DETAILS;
			CREATE TABLE TRANS_DETAILS(
				ID INT IDENTITY(1,1) NOT NULL,
				TRANSACTION_ID VARCHAR(100) NOT NULL REFERENCES TRANSACTIONS(TRANSACTION_ID),
				BARCODE VARCHAR(50) NOT NULL REFERENCES INVENTORY(BARCODE),
				QUANTITY DECIMAL(18,2) NOT NULL,
				AMOUNT DECIMAL(18,2) NOT NULL,
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS P_RETURNS;
			CREATE TABLE P_RETURNS(
				ID INT NOT NULL IDENTITY PRIMARY KEY,
				BARCODE VARCHAR(50) NOT NULL REFERENCES INVENTORY(BARCODE),
				QUANTITY DECIMAL(18,2) NOT NULL,
				AMOUNT DECIMAL(18,2) NOT NULL,
				TRANSACTION_ID VARCHAR(100) NOT NULL REFERENCES TRANSACTIONS(TRANSACTION_ID),
				DATE DATETIME NOT NULL,
				REASON TEXT NOT NULL,
				CUSTOMER TEXT NULL,
				CONTACT TEXT NULL,

			);
			DROP TABLE IF EXISTS USER_PERMISSIONS;
			CREATE TABLE USER_PERMISSIONS(
				ID INT IDENTITY(1,1) NOT NULL,
				EMP_ID VARCHAR(255) REFERENCES ACCOUNTS(EMP_ID) NOT NULL,
				USERNAME VARCHAR(255) NOT NULL REFERENCES ACCOUNTS(USERNAME),
				PERMISSION VARCHAR(100) NOT NULL,
				STATUS INT NOT NULL,
				PRIMARY KEY(ID)
			);

			DROP TABLE IF EXISTS CUSTOMERS;
			CREATE TABLE CUSTOMERS(
				ID INT IDENTITY(1,1) NOT NULL,
				NAME VARCHAR(100) NOT NULL UNIQUE,
				ADDRESS VARCHAR(500) NULL,
				GENDER VARCHAR(50) NULL,
				CONTACT VARCHAR(50) NULL,
				PRIMARY KEY(ID),
				);

			DROP TABLE IF EXISTS SUPPLIERS;
			CREATE TABLE SUPPLIERS(
				ID INT IDENTITY(1,1) NOT NULL,
				NAME VARCHAR(100) NOT NULL UNIQUE,
				ADDRESS VARCHAR(500) NULL,
				GENDER VARCHAR(50) NULL,
				CONTACT VARCHAR(50) NULL,
				PRIMARY KEY(ID),
				);

			DROP TABLE IF EXISTS PRODUCTS;
			CREATE TABLE PRODUCTS(
				ID INT IDENTITY(1,1) NOT NULL,
				NAME VARCHAR(200) NOT NULL,
				SUPPLIER VARCHAR(100) NOT NULL REFERENCES SUPPLIERS(NAME),
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS SALES;
			CREATE TABLE SALES(
				ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
				TRANS_DATE DATE NOT NULL,
				BARCODE VARCHAR(50) NOT NULL REFERENCES INVENTORY(BARCODE),
				QUANTITY DECIMAL(18,2) NULL,
				AMOUNT DECIMAL(18,2) NOT NULL,
				PROFIT DECIMAL(18,2) NOT NULL,
				SALE_TYPE VARCHAR(100) NOT NULL REFERENCES M_PAYMENTS(METHOD),
	
				);

			DROP TABLE IF EXISTS SUMMARY_SALES;
			CREATE TABLE SUMMARY_SALES(
				ID INT IDENTITY(1,1) NOT NULL,
				SALE_MONTH VARCHAR(100) NOT NULL,
				BARCODE VARCHAR(50) NOT NULL REFERENCES INVENTORY(BARCODE),
				QUANTITY DECIMAL(18,2) NOT NULL,
				AMOUNT DECIMAL(18,2) NOT NULL,
				PROFIT DECIMAL(18,2) NOT NULL,
				METHOD VARCHAR(100) NOT NULL REFERENCES M_PAYMENTS(METHOD)
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS COMPANY;
			CREATE TABLE COMPANY(
				ID INT IDENTITY(1,1) NOT NULL,
				NAME VARCHAR(255) NOT NULL UNIQUE,
				TRADENAME VARCHAR(500) NULL,
				ADDRESS VARCHAR(500) NOT NULL,
				DESCRIPTION VARCHAR(2000) NOT NULL,
				CONTACT VARCHAR(100) NOT NULL,
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS CURRENCIES;
			CREATE TABLE CURRENCIES(
				ID INT IDENTITY(1,1) NOT NULL,
				CURRENCY VARCHAR(100) NOT NULL UNIQUE,
				SYMBOL VARCHAR(50) NOT NULL,
				RATE DECIMAL(18,2) NOT NULL,
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS BASE_CURRENCY;
			CREATE TABLE BASE_CURRENCY(
				ID INT IDENTITY(1,1) NOT NULL,
				CURRENCY VARCHAR(100) NOT NULL UNIQUE,
				SYMBOL VARCHAR(50) NOT NULL,
				PRIMARY KEY(ID)
				);

			DROP TABLE IF EXISTS TAX;
			CREATE TABLE TAX(
				ID INT IDENTITY PRIMARY KEY,
				COMPANY VARCHAR(255) NOT NULL REFERENCES COMPANY(NAME),
				VAT_NO VARCHAR(100) NOT NULL,
				VAT DECIMAL(18,2)  NOT NULL,
				NOTES VARCHAR(500) NOT NULL
				);

			DROP TABLE IF EXISTS OTHER_METHODS;
			CREATE TABLE OTHER_METHODS(
				ID INT IDENTITY PRIMARY KEY,
				TRANSACTION_ID VARCHAR(100) REFERENCES TRANSACTIONS(TRANSACTION_ID) NOT NULL,
				METHOD VARCHAR(100) REFERENCES M_PAYMENTS(METHOD) NOT NULL,
				AMOUNT DECIMAL(18,2) NOT NULL,
				);
	DROP TABLE IF EXISTS CASHUP;
	CREATE TABLE CASHUP(
	ID INT IDENTITY PRIMARY KEY,
	TRANS_DATE VARCHAR(50) NOT NULL,
	USERNAME VARCHAR(255) NOT NULL REFERENCES ACCOUNTS(USERNAME),
	METHOD VARCHAR(100) NOT NULL REFERENCES M_PAYMENTS(METHOD),
	AMOUNT DECIMAL(18,2) NOT NULL,
	TILL VARCHAR(100) NOT NULL REFERENCES TILLS(TILL_NUMBER)
);
	
			INSERT INTO M_PAYMENTS(METHOD, NOTES) VALUES('CASH','For all cash Transaactions in the system');
			INSERT INTO M_PAYMENTS(METHOD, NOTES) VALUES('CARD','For all card Transaactions in the system');
			INSERT INTO M_PAYMENTS(METHOD, NOTES) VALUES('ECOCASH','For all ecocash Transaactions in the system');
			INSERT INTO M_PAYMENTS(METHOD, NOTES) VALUES('FOREX','For all forex Transaactions in the system');
			INSERT INTO M_PAYMENTS(METHOD, NOTES) VALUES('MULTIPLE','For all split Tender Transaactions in the system');

			INSERT INTO USERS(NAME,ID_NO,ADDRESS,GENDER,AGE,CONTACT,EMP_ID) VALUES('admin','admin','admin','male',1,'0777777','1');
			INSERT INTO ACCOUNTS(EMP_ID,USERNAME,PASSWORD,STATUS) VALUES('1','admin','4GecQ6hxhkk=',1);

			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','transaction_logs',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','cashup_balances',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','cancel_transactions',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','view_sales',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','return_sales',1);

			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','stock_reports',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','profit_reports',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','dayEnd_reports',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','scheduled_reports',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','give_permissions',1);

			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','update_users',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','register_users',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','edit_settings',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','activate_users',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','add_inventory',1);

			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','edit_inventory',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','is_admin',1);
			INSERT INTO USER_PERMISSIONS(EMP_ID,USERNAME,PERMISSION,STATUS) VALUES('1','admin','backup_database',1);
	 COMMIT TRANSACTION 
	 PRINT('DATABASE CREATION SUCCEDED');
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
	PRINT('DATABASE CREATION FAILED');
END CATCH